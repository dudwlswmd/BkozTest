{"version":3,"file":"static/js/7985.e0b0f904.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js","../node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["CircleWarp","_Circle","_inherits","_super","_createSuper","x","y","radius","canvasSize","_this","_classCallCheck","call","_objectSpread","_createClass","key","value","point","_this$canvasSize","this","width","height","_get","_getPrototypeOf","prototype","range","rect","circle","newPos","position","undefined","biggerCircle","Circle","size","rectSW","Rectangle","origin","Linker","_ParticlesInteractorB","container","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","Map","_p1$retina$linksDista","_this2","pos1","getPosition","canvas","linkOpt1","optOpacity","opacity","optDistance","retina","linksDistance","warp","_step","query","quadTree","_iterator","_createForOfIteratorHelper","_loop","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","pos2","distance","_getDistances","getDistances","dx","dy","absDiffs","Math","abs","warpDistances","min","sqrt","pow","getLinkDistance","opacityLine","push","s","n","done","err","e","f","particle","_particle$options$lin","Links","_len","arguments","length","sources","Array","_key","_i","_sources","source","load","ParticlesInteractorBase"],"sourceRoot":""}