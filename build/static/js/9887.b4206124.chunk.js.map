{"version":3,"file":"static/js/9887.b4206124.chunk.js","mappings":"4LAEaA,EAAkB,WAC3B,SAAAA,EAAYC,IAAWC,EAAAA,EAAAA,GAAA,KAAAF,GACnBG,KAAKF,UAAYA,CACrB,CA0BC,OA1BAG,EAAAA,EAAAA,GAAAJ,EAAA,EAAAK,IAAA,OAAAC,MACD,SAAKC,GAAU,IAAAC,EAAAC,EAAAC,EACLT,EAAYE,KAAKF,UAAWU,EAAUJ,EAASI,QAC/CC,GAASC,EAAAA,EAAAA,IAAyBF,EAAQC,OAAQL,EAASO,GAAIH,EAAQI,kBAC7ER,EAASS,aAAcC,EAAAA,EAAAA,IAAcL,EAAOM,OAASjB,EAAUkB,OAAOC,WACtEb,EAASc,eAAgBJ,EAAAA,EAAAA,IAA4B,QAAfT,EAACI,EAAOU,eAAO,IAAAd,EAAAA,EATtC,GAUfD,EAASgB,gBAA8B,QAAfd,EAAGG,EAAOY,aAAK,IAAAf,OAAA,EAAZA,EAAcgB,UACzC,IAAMC,EAA8C,QAAhChB,GAAGiB,EAAAA,EAAAA,IAAgBf,EAAOY,cAAM,IAAAd,EAAAA,EAAIH,EAASqB,eAC7DF,IACAnB,EAASsB,aAAcC,EAAAA,EAAAA,IAAuBJ,EAAgBnB,EAASgB,gBAAiBtB,EAAUkB,OAAOY,cAEjH,GAAC,CAAA1B,IAAA,YAAAC,MACD,SAAUC,GACA,IAAAiB,EAAQjB,EAASgB,gBAAmBM,EAAgBtB,EAAhBsB,YAC1C,OAAStB,EAASyB,YACbzB,EAAS0B,YACRT,SACyBU,KAAd,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaM,EAAE7B,QAAuBuB,EAAYM,EAAEC,aACxBF,KAAd,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,EAAE/B,QAAuBuB,EAAYQ,EAAED,aAC3BF,KAAd,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaS,EAAEhC,QAAuBuB,EAAYS,EAAEF,OACjE,GAAC,CAAA/B,IAAA,SAAAC,MACD,SAAOC,EAAUgC,GACRpC,KAAKqC,UAAUjC,KAGpBkC,EAAAA,EAAAA,IAAYlC,EAASsB,YAAaU,EACtC,KAACvC,CAAA,CA7B0B,E","sources":["../node_modules/@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js"],"sourcesContent":["import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n    }\n}\n"],"names":["StrokeColorUpdater","container","_classCallCheck","this","_createClass","key","value","particle","_stroke$opacity","_stroke$color","_rangeColorToHsl","options","stroke","itemFromSingleOrMultiple","id","reduceDuplicates","strokeWidth","getRangeValue","width","retina","pixelRatio","strokeOpacity","opacity","strokeAnimation","color","animation","strokeHslColor","rangeColorToHsl","getFillColor","strokeColor","getHslAnimationFromHsl","reduceFactor","destroyed","spawning","undefined","h","enable","s","l","delta","isEnabled","updateColor"],"sourceRoot":""}