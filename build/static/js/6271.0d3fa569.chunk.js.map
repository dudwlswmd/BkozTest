{"version":3,"file":"static/js/6271.0d3fa569.chunk.js","mappings":"+MAEaA,EAAS,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAClB,SAAAA,EAAYK,GAAW,OAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAAG,EAAAI,KAAA,KACbF,EACV,CA0BC,OA1BAG,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,QAAAC,MACD,WACA,GAAC,CAAAD,IAAA,OAAAC,MACD,WACA,GAAC,CAAAD,IAAA,WAAAC,MACD,SAASC,GACL,IAAMN,EAAYO,KAAKP,eACIQ,IAAvBF,EAAGG,kBACHH,EAAGG,iBAAkBC,EAAAA,EAAAA,IAAcJ,EAAGK,QAAQC,KAAKC,QAAQC,UAAYd,EAAUe,OAAOC,YAE5F,IACsBC,EADhBH,EAAWR,EAAGG,gBAAiBS,EAAOZ,EAAGa,cAAeC,EAAQpB,EAAUqB,UAAUC,SAASC,YAAYL,EAAMJ,GAAUU,GAAAC,EAAAA,EAAAA,GAC9GL,GAAK,IAAtB,IAAAI,EAAAE,MAAAT,EAAAO,EAAAG,KAAAC,MAAwB,KAAbC,EAAEZ,EAAAZ,MACT,GAAIC,IAAOuB,GAAOA,EAAGlB,QAAQC,KAAKC,QAAQiB,SAAUD,EAAGE,YAAaF,EAAGG,SAAvE,CAGM,IAAAC,EAAOJ,EAAGV,cAAae,GAAeC,EAAAA,EAAAA,IAAajB,EAAMe,GAA9BG,EAAEF,EAAFE,GAAIC,EAAEH,EAAFG,GAAiCC,EAAShC,EAAGK,QAAQC,KAAKC,QAAQyB,OAAQC,EAAKH,GAnB1G,IAmBgHE,EAAOE,GAAoBC,EAAKJ,GAnBhJ,IAmBsJC,EAAOI,GAAoBC,EAAWd,EAAGe,KAAKvC,MAAQC,EAAGsC,KAAKvC,MAAOwC,EAnB1M,EAmBgOF,EAC3PrC,EAAGwC,SAASN,GAAKD,EAAKI,EACtBrC,EAAGwC,SAASJ,GAAKD,EAAKE,EACtBd,EAAGiB,SAASN,GAAKD,EAAKM,EACtBhB,EAAGiB,SAASJ,GAAKD,EAAKI,CALtB,CAMJ,CAAC,OAAAE,GAAAvB,EAAAwB,EAAAD,EAAA,SAAAvB,EAAAyB,GAAA,CACL,GAAC,CAAA7C,IAAA,YAAAC,MACD,SAAU6C,GACN,OAAOA,EAASvC,QAAQC,KAAKC,QAAQiB,MACzC,GAAC,CAAA1B,IAAA,QAAAC,MACD,WACA,KAACV,CAAA,CA7BiB,CAASwD,EAAAA,G","sources":["../node_modules/@tsparticles/interaction-particles-attract/browser/Attractor.js"],"sourcesContent":["import { ParticlesInteractorBase, getDistances, getRangeValue, } from \"@tsparticles/engine\";\nconst attractFactor = 1000, identity = 1;\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n"],"names":["Attractor","_ParticlesInteractorB","_inherits","_super","_createSuper","container","_classCallCheck","call","_createClass","key","value","p1","this","undefined","attractDistance","getRangeValue","options","move","attract","distance","retina","pixelRatio","_step","pos1","getPosition","query","particles","quadTree","queryCircle","_iterator","_createForOfIteratorHelper","s","n","done","p2","enable","destroyed","spawning","pos2","_getDistances","getDistances","dx","dy","rotate","ax","x","ay","y","p1Factor","size","p2Factor","velocity","err","e","f","particle","ParticlesInteractorBase"],"sourceRoot":""}