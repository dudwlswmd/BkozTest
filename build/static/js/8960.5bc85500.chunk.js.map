{"version":3,"file":"static/js/8960.5bc85500.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js","../node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js"],"sourcesContent":["import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n"],"names":["calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","clamp","bubbleMode","Bubbler","_ExternalInteractorBa","_inherits","_super","_createSuper","container","_this","_classCallCheck","call","_clickBubble","options","actualOptions","mouseClickPos","interactivity","mouse","clickPosition","bubbleOptions","modes","bubble","distance","retina","bubbleModeDistance","_step","query","particles","quadTree","queryCircle","p","isEnabled","_iterator","_createForOfIteratorHelper","s","n","done","_container$interactiv","_particle$opacity$val","_particle$opacity","particle","clicking","inRange","durationEnd","pos","getPosition","distMouse","getDistance","timeSpent","Date","getTime","clickTime","millisecondsToSeconds","duration","sizeData","bubbleObj","optValue","bubbleModeSize","radius","particlesObj","getRangeMax","size","pixelRatio","type","_process","opacityData","opacity","_hoverBubbleColor","color","err","e","f","_hoverBubble","mousePos","position","_step2","_iterator2","pointDistance","status","mouseMoveEvent","_hoverBubbleSize","_hoverBubbleOpacity","reset","mouseLeaveEvent","divBubble","finalColor","modeColor","bubbleColor","itemFromSingleOrMultiple","rangeColorToHsl","mix","undefined","pColor","getFillColor","rgbToHsl","colorMix","_divBubble$opacity","_options$interactivit","_particle$opacity$val2","_particle$opacity2","modeOpacity","optOpacity","modeSize","optSize","data","_data$particlesObj$va","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","_singleSelectorHover","delta","selector","div","selectors","document","querySelectorAll","length","forEach","item","_step3","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","Circle","Rectangle","_iterator3","contains","divs","divMode","clear","handleClickMode","mode","_createClass","key","force","this","_this2","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","onDiv","isInArray","divModeExecute","_particle$interactivi","isDivModeEnabled","Bubble","_len","arguments","sources","Array","_key","_i","_sources","source","load","ExternalInteractorBase"],"sourceRoot":""}