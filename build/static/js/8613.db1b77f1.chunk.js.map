{"version":3,"file":"static/js/8613.db1b77f1.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-collisions/browser/Absorb.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/Bounce.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/Destroy.js","../node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js"],"sourcesContent":["import { clamp } from \"@tsparticles/engine\";\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n","import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"@tsparticles/engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n","import { absorb } from \"./Absorb.js\";\nimport { bounce } from \"./Bounce.js\";\nimport { destroy } from \"./Destroy.js\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { bounce } from \"./Bounce.js\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n"],"names":["half","absorbFactor","minAbsorbFactor","updateAbsorb","p1","r1","p2","r2","delta","pixelRatio","factor","clamp","options","collisions","absorb","speed","size","value","destroy","fixBounceSpeed","p","undefined","collisionMaxSpeed","getRangeValue","maxSpeed","velocity","length","bounce","circleBounce","circleBounceDataFromParticle","resolveCollision","mode","getRadius","unbreakable","Collider","_ParticlesInteractorB","_inherits","_super","_createSuper","container","_classCallCheck","call","_createClass","key","destroyed","spawning","_step","this","pos1","getPosition","radius1","query","particles","quadTree","queryCircle","_iterator","_createForOfIteratorHelper","s","n","done","enable","pos2","radius2","Math","abs","round","z","getDistance","retina","err","e","f","particle","ParticlesInteractorBase"],"sourceRoot":""}